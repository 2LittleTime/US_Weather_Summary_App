//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TemplateFullTests
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class QclcdEntities : DbContext
    {
        public QclcdEntities()
            : base("name=QclcdEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<DailySummary> DailySummaries { get; set; }
        public DbSet<DateReference> DateReferences { get; set; }
        public DbSet<Station> Stations { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<uvw_DailySummaryUniqueWbans> uvw_DailySummaryUniqueWbans { get; set; }
        public DbSet<uvw_DailySummaryWbansNotInStation> uvw_DailySummaryWbansNotInStation { get; set; }
        public DbSet<uvw_StationUniqueWbans> uvw_StationUniqueWbans { get; set; }
    
        public virtual int BuildDateReferenceTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BuildDateReferenceTable");
        }
    
        public virtual int GetJSON(string table_name, string department, Nullable<short> registries_per_request)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("department", department) :
                new ObjectParameter("department", typeof(string));
    
            var registries_per_requestParameter = registries_per_request.HasValue ?
                new ObjectParameter("registries_per_request", registries_per_request) :
                new ObjectParameter("registries_per_request", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetJSON", table_nameParameter, departmentParameter, registries_per_requestParameter);
        }
    
        public virtual int JulyTemps(string wBanIn, Nullable<System.DateTime> beginDateIn, Nullable<System.DateTime> endDateIn)
        {
            var wBanInParameter = wBanIn != null ?
                new ObjectParameter("wBanIn", wBanIn) :
                new ObjectParameter("wBanIn", typeof(string));
    
            var beginDateInParameter = beginDateIn.HasValue ?
                new ObjectParameter("beginDateIn", beginDateIn) :
                new ObjectParameter("beginDateIn", typeof(System.DateTime));
    
            var endDateInParameter = endDateIn.HasValue ?
                new ObjectParameter("endDateIn", endDateIn) :
                new ObjectParameter("endDateIn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JulyTemps", wBanInParameter, beginDateInParameter, endDateInParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<usp_AvgWindSummary_Result> usp_AvgWindSummary(string wBan, Nullable<int> beginMonth, Nullable<int> beginDay, Nullable<int> beginYear, Nullable<int> endMonth, Nullable<int> endDay, Nullable<int> endYear)
        {
            var wBanParameter = wBan != null ?
                new ObjectParameter("wBan", wBan) :
                new ObjectParameter("wBan", typeof(string));
    
            var beginMonthParameter = beginMonth.HasValue ?
                new ObjectParameter("beginMonth", beginMonth) :
                new ObjectParameter("beginMonth", typeof(int));
    
            var beginDayParameter = beginDay.HasValue ?
                new ObjectParameter("beginDay", beginDay) :
                new ObjectParameter("beginDay", typeof(int));
    
            var beginYearParameter = beginYear.HasValue ?
                new ObjectParameter("beginYear", beginYear) :
                new ObjectParameter("beginYear", typeof(int));
    
            var endMonthParameter = endMonth.HasValue ?
                new ObjectParameter("endMonth", endMonth) :
                new ObjectParameter("endMonth", typeof(int));
    
            var endDayParameter = endDay.HasValue ?
                new ObjectParameter("endDay", endDay) :
                new ObjectParameter("endDay", typeof(int));
    
            var endYearParameter = endYear.HasValue ?
                new ObjectParameter("endYear", endYear) :
                new ObjectParameter("endYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgWindSummary_Result>("usp_AvgWindSummary", wBanParameter, beginMonthParameter, beginDayParameter, beginYearParameter, endMonthParameter, endDayParameter, endYearParameter);
        }
    
        public virtual ObjectResult<usp_AvgWindSummaryJson_Result> usp_AvgWindSummaryJson(string wBan, Nullable<int> beginMonth, Nullable<int> beginDay, Nullable<int> beginYear, Nullable<int> endMonth, Nullable<int> endDay, Nullable<int> endYear)
        {
            var wBanParameter = wBan != null ?
                new ObjectParameter("wBan", wBan) :
                new ObjectParameter("wBan", typeof(string));
    
            var beginMonthParameter = beginMonth.HasValue ?
                new ObjectParameter("beginMonth", beginMonth) :
                new ObjectParameter("beginMonth", typeof(int));
    
            var beginDayParameter = beginDay.HasValue ?
                new ObjectParameter("beginDay", beginDay) :
                new ObjectParameter("beginDay", typeof(int));
    
            var beginYearParameter = beginYear.HasValue ?
                new ObjectParameter("beginYear", beginYear) :
                new ObjectParameter("beginYear", typeof(int));
    
            var endMonthParameter = endMonth.HasValue ?
                new ObjectParameter("endMonth", endMonth) :
                new ObjectParameter("endMonth", typeof(int));
    
            var endDayParameter = endDay.HasValue ?
                new ObjectParameter("endDay", endDay) :
                new ObjectParameter("endDay", typeof(int));
    
            var endYearParameter = endYear.HasValue ?
                new ObjectParameter("endYear", endYear) :
                new ObjectParameter("endYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgWindSummaryJson_Result>("usp_AvgWindSummaryJson", wBanParameter, beginMonthParameter, beginDayParameter, beginYearParameter, endMonthParameter, endDayParameter, endYearParameter);
        }
    
        public virtual int usp_DeleteDailySummaryRowsNoWban()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteDailySummaryRowsNoWban");
        }
    
        public virtual ObjectResult<usp_PrecipSummary_Result> usp_PrecipSummary(string wBan, Nullable<int> beginMonth, Nullable<int> beginDay, Nullable<int> beginYear, Nullable<int> endMonth, Nullable<int> endDay, Nullable<int> endYear)
        {
            var wBanParameter = wBan != null ?
                new ObjectParameter("wBan", wBan) :
                new ObjectParameter("wBan", typeof(string));
    
            var beginMonthParameter = beginMonth.HasValue ?
                new ObjectParameter("beginMonth", beginMonth) :
                new ObjectParameter("beginMonth", typeof(int));
    
            var beginDayParameter = beginDay.HasValue ?
                new ObjectParameter("beginDay", beginDay) :
                new ObjectParameter("beginDay", typeof(int));
    
            var beginYearParameter = beginYear.HasValue ?
                new ObjectParameter("beginYear", beginYear) :
                new ObjectParameter("beginYear", typeof(int));
    
            var endMonthParameter = endMonth.HasValue ?
                new ObjectParameter("endMonth", endMonth) :
                new ObjectParameter("endMonth", typeof(int));
    
            var endDayParameter = endDay.HasValue ?
                new ObjectParameter("endDay", endDay) :
                new ObjectParameter("endDay", typeof(int));
    
            var endYearParameter = endYear.HasValue ?
                new ObjectParameter("endYear", endYear) :
                new ObjectParameter("endYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PrecipSummary_Result>("usp_PrecipSummary", wBanParameter, beginMonthParameter, beginDayParameter, beginYearParameter, endMonthParameter, endDayParameter, endYearParameter);
        }
    
        public virtual ObjectResult<string> usp_StatesWithData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_StatesWithData");
        }
    
        public virtual ObjectResult<usp_StationNamesWithData_Result> usp_StationNamesWithData(string stationState)
        {
            var stationStateParameter = stationState != null ?
                new ObjectParameter("stationState", stationState) :
                new ObjectParameter("stationState", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StationNamesWithData_Result>("usp_StationNamesWithData", stationStateParameter);
        }
    
        public virtual ObjectResult<usp_TempSummary_Result> usp_TempSummary(string wBan, Nullable<int> beginMonth, Nullable<int> beginDay, Nullable<int> beginYear, Nullable<int> endMonth, Nullable<int> endDay, Nullable<int> endYear)
        {
            var wBanParameter = wBan != null ?
                new ObjectParameter("wBan", wBan) :
                new ObjectParameter("wBan", typeof(string));
    
            var beginMonthParameter = beginMonth.HasValue ?
                new ObjectParameter("beginMonth", beginMonth) :
                new ObjectParameter("beginMonth", typeof(int));
    
            var beginDayParameter = beginDay.HasValue ?
                new ObjectParameter("beginDay", beginDay) :
                new ObjectParameter("beginDay", typeof(int));
    
            var beginYearParameter = beginYear.HasValue ?
                new ObjectParameter("beginYear", beginYear) :
                new ObjectParameter("beginYear", typeof(int));
    
            var endMonthParameter = endMonth.HasValue ?
                new ObjectParameter("endMonth", endMonth) :
                new ObjectParameter("endMonth", typeof(int));
    
            var endDayParameter = endDay.HasValue ?
                new ObjectParameter("endDay", endDay) :
                new ObjectParameter("endDay", typeof(int));
    
            var endYearParameter = endYear.HasValue ?
                new ObjectParameter("endYear", endYear) :
                new ObjectParameter("endYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TempSummary_Result>("usp_TempSummary", wBanParameter, beginMonthParameter, beginDayParameter, beginYearParameter, endMonthParameter, endDayParameter, endYearParameter);
        }
    }
}
